// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gen

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type _Entity interface {
	Is_Entity()
}

type ChangelogChangeFilterType struct {
	And            []*ChangelogChangeFilterType `json:"AND"`
	Or             []*ChangelogChangeFilterType `json:"OR"`
	ID             *string                      `json:"id"`
	IDNe           *string                      `json:"id_ne"`
	IDGt           *string                      `json:"id_gt"`
	IDLt           *string                      `json:"id_lt"`
	IDGte          *string                      `json:"id_gte"`
	IDLte          *string                      `json:"id_lte"`
	IDIn           []string                     `json:"id_in"`
	Column         *string                      `json:"column"`
	ColumnNe       *string                      `json:"column_ne"`
	ColumnGt       *string                      `json:"column_gt"`
	ColumnLt       *string                      `json:"column_lt"`
	ColumnGte      *string                      `json:"column_gte"`
	ColumnLte      *string                      `json:"column_lte"`
	ColumnIn       []string                     `json:"column_in"`
	ColumnLike     *string                      `json:"column_like"`
	ColumnPrefix   *string                      `json:"column_prefix"`
	ColumnSuffix   *string                      `json:"column_suffix"`
	OldValue       *string                      `json:"oldValue"`
	OldValueNe     *string                      `json:"oldValue_ne"`
	OldValueGt     *string                      `json:"oldValue_gt"`
	OldValueLt     *string                      `json:"oldValue_lt"`
	OldValueGte    *string                      `json:"oldValue_gte"`
	OldValueLte    *string                      `json:"oldValue_lte"`
	OldValueIn     []string                     `json:"oldValue_in"`
	OldValueLike   *string                      `json:"oldValue_like"`
	OldValuePrefix *string                      `json:"oldValue_prefix"`
	OldValueSuffix *string                      `json:"oldValue_suffix"`
	NewValue       *string                      `json:"newValue"`
	NewValueNe     *string                      `json:"newValue_ne"`
	NewValueGt     *string                      `json:"newValue_gt"`
	NewValueLt     *string                      `json:"newValue_lt"`
	NewValueGte    *string                      `json:"newValue_gte"`
	NewValueLte    *string                      `json:"newValue_lte"`
	NewValueIn     []string                     `json:"newValue_in"`
	NewValueLike   *string                      `json:"newValue_like"`
	NewValuePrefix *string                      `json:"newValue_prefix"`
	NewValueSuffix *string                      `json:"newValue_suffix"`
	LogID          *string                      `json:"logId"`
	LogIDNe        *string                      `json:"logId_ne"`
	LogIDGt        *string                      `json:"logId_gt"`
	LogIDLt        *string                      `json:"logId_lt"`
	LogIDGte       *string                      `json:"logId_gte"`
	LogIDLte       *string                      `json:"logId_lte"`
	LogIDIn        []string                     `json:"logId_in"`
	UpdatedAt      *time.Time                   `json:"updatedAt"`
	UpdatedAtNe    *time.Time                   `json:"updatedAt_ne"`
	UpdatedAtGt    *time.Time                   `json:"updatedAt_gt"`
	UpdatedAtLt    *time.Time                   `json:"updatedAt_lt"`
	UpdatedAtGte   *time.Time                   `json:"updatedAt_gte"`
	UpdatedAtLte   *time.Time                   `json:"updatedAt_lte"`
	UpdatedAtIn    []*time.Time                 `json:"updatedAt_in"`
	CreatedAt      *time.Time                   `json:"createdAt"`
	CreatedAtNe    *time.Time                   `json:"createdAt_ne"`
	CreatedAtGt    *time.Time                   `json:"createdAt_gt"`
	CreatedAtLt    *time.Time                   `json:"createdAt_lt"`
	CreatedAtGte   *time.Time                   `json:"createdAt_gte"`
	CreatedAtLte   *time.Time                   `json:"createdAt_lte"`
	CreatedAtIn    []*time.Time                 `json:"createdAt_in"`
	UpdatedBy      *string                      `json:"updatedBy"`
	UpdatedByNe    *string                      `json:"updatedBy_ne"`
	UpdatedByGt    *string                      `json:"updatedBy_gt"`
	UpdatedByLt    *string                      `json:"updatedBy_lt"`
	UpdatedByGte   *string                      `json:"updatedBy_gte"`
	UpdatedByLte   *string                      `json:"updatedBy_lte"`
	UpdatedByIn    []string                     `json:"updatedBy_in"`
	CreatedBy      *string                      `json:"createdBy"`
	CreatedByNe    *string                      `json:"createdBy_ne"`
	CreatedByGt    *string                      `json:"createdBy_gt"`
	CreatedByLt    *string                      `json:"createdBy_lt"`
	CreatedByGte   *string                      `json:"createdBy_gte"`
	CreatedByLte   *string                      `json:"createdBy_lte"`
	CreatedByIn    []string                     `json:"createdBy_in"`
	Log            *ChangelogFilterType         `json:"log"`
}

type ChangelogFilterType struct {
	And            []*ChangelogFilterType     `json:"AND"`
	Or             []*ChangelogFilterType     `json:"OR"`
	ID             *string                    `json:"id"`
	IDNe           *string                    `json:"id_ne"`
	IDGt           *string                    `json:"id_gt"`
	IDLt           *string                    `json:"id_lt"`
	IDGte          *string                    `json:"id_gte"`
	IDLte          *string                    `json:"id_lte"`
	IDIn           []string                   `json:"id_in"`
	Entity         *string                    `json:"entity"`
	EntityNe       *string                    `json:"entity_ne"`
	EntityGt       *string                    `json:"entity_gt"`
	EntityLt       *string                    `json:"entity_lt"`
	EntityGte      *string                    `json:"entity_gte"`
	EntityLte      *string                    `json:"entity_lte"`
	EntityIn       []string                   `json:"entity_in"`
	EntityLike     *string                    `json:"entity_like"`
	EntityPrefix   *string                    `json:"entity_prefix"`
	EntitySuffix   *string                    `json:"entity_suffix"`
	EntityID       *string                    `json:"entityID"`
	EntityIDNe     *string                    `json:"entityID_ne"`
	EntityIDGt     *string                    `json:"entityID_gt"`
	EntityIDLt     *string                    `json:"entityID_lt"`
	EntityIDGte    *string                    `json:"entityID_gte"`
	EntityIDLte    *string                    `json:"entityID_lte"`
	EntityIDIn     []string                   `json:"entityID_in"`
	EntityIDLike   *string                    `json:"entityID_like"`
	EntityIDPrefix *string                    `json:"entityID_prefix"`
	EntityIDSuffix *string                    `json:"entityID_suffix"`
	Type           *ChangelogType             `json:"type"`
	TypeNe         *ChangelogType             `json:"type_ne"`
	TypeGt         *ChangelogType             `json:"type_gt"`
	TypeLt         *ChangelogType             `json:"type_lt"`
	TypeGte        *ChangelogType             `json:"type_gte"`
	TypeLte        *ChangelogType             `json:"type_lte"`
	TypeIn         []ChangelogType            `json:"type_in"`
	Date           *time.Time                 `json:"date"`
	DateNe         *time.Time                 `json:"date_ne"`
	DateGt         *time.Time                 `json:"date_gt"`
	DateLt         *time.Time                 `json:"date_lt"`
	DateGte        *time.Time                 `json:"date_gte"`
	DateLte        *time.Time                 `json:"date_lte"`
	DateIn         []*time.Time               `json:"date_in"`
	UpdatedAt      *time.Time                 `json:"updatedAt"`
	UpdatedAtNe    *time.Time                 `json:"updatedAt_ne"`
	UpdatedAtGt    *time.Time                 `json:"updatedAt_gt"`
	UpdatedAtLt    *time.Time                 `json:"updatedAt_lt"`
	UpdatedAtGte   *time.Time                 `json:"updatedAt_gte"`
	UpdatedAtLte   *time.Time                 `json:"updatedAt_lte"`
	UpdatedAtIn    []*time.Time               `json:"updatedAt_in"`
	CreatedAt      *time.Time                 `json:"createdAt"`
	CreatedAtNe    *time.Time                 `json:"createdAt_ne"`
	CreatedAtGt    *time.Time                 `json:"createdAt_gt"`
	CreatedAtLt    *time.Time                 `json:"createdAt_lt"`
	CreatedAtGte   *time.Time                 `json:"createdAt_gte"`
	CreatedAtLte   *time.Time                 `json:"createdAt_lte"`
	CreatedAtIn    []*time.Time               `json:"createdAt_in"`
	UpdatedBy      *string                    `json:"updatedBy"`
	UpdatedByNe    *string                    `json:"updatedBy_ne"`
	UpdatedByGt    *string                    `json:"updatedBy_gt"`
	UpdatedByLt    *string                    `json:"updatedBy_lt"`
	UpdatedByGte   *string                    `json:"updatedBy_gte"`
	UpdatedByLte   *string                    `json:"updatedBy_lte"`
	UpdatedByIn    []string                   `json:"updatedBy_in"`
	CreatedBy      *string                    `json:"createdBy"`
	CreatedByNe    *string                    `json:"createdBy_ne"`
	CreatedByGt    *string                    `json:"createdBy_gt"`
	CreatedByLt    *string                    `json:"createdBy_lt"`
	CreatedByGte   *string                    `json:"createdBy_gte"`
	CreatedByLte   *string                    `json:"createdBy_lte"`
	CreatedByIn    []string                   `json:"createdBy_in"`
	Changes        *ChangelogChangeFilterType `json:"changes"`
}

type _Service struct {
	Sdl *string `json:"sdl"`
}

type ChangelogChangeSortType string

const (
	ChangelogChangeSortTypeIDAsc         ChangelogChangeSortType = "ID_ASC"
	ChangelogChangeSortTypeIDDesc        ChangelogChangeSortType = "ID_DESC"
	ChangelogChangeSortTypeColumnAsc     ChangelogChangeSortType = "COLUMN_ASC"
	ChangelogChangeSortTypeColumnDesc    ChangelogChangeSortType = "COLUMN_DESC"
	ChangelogChangeSortTypeOldValueAsc   ChangelogChangeSortType = "OLD_VALUE_ASC"
	ChangelogChangeSortTypeOldValueDesc  ChangelogChangeSortType = "OLD_VALUE_DESC"
	ChangelogChangeSortTypeNewValueAsc   ChangelogChangeSortType = "NEW_VALUE_ASC"
	ChangelogChangeSortTypeNewValueDesc  ChangelogChangeSortType = "NEW_VALUE_DESC"
	ChangelogChangeSortTypeLogIDAsc      ChangelogChangeSortType = "LOG_ID_ASC"
	ChangelogChangeSortTypeLogIDDesc     ChangelogChangeSortType = "LOG_ID_DESC"
	ChangelogChangeSortTypeUpdatedAtAsc  ChangelogChangeSortType = "UPDATED_AT_ASC"
	ChangelogChangeSortTypeUpdatedAtDesc ChangelogChangeSortType = "UPDATED_AT_DESC"
	ChangelogChangeSortTypeCreatedAtAsc  ChangelogChangeSortType = "CREATED_AT_ASC"
	ChangelogChangeSortTypeCreatedAtDesc ChangelogChangeSortType = "CREATED_AT_DESC"
	ChangelogChangeSortTypeUpdatedByAsc  ChangelogChangeSortType = "UPDATED_BY_ASC"
	ChangelogChangeSortTypeUpdatedByDesc ChangelogChangeSortType = "UPDATED_BY_DESC"
	ChangelogChangeSortTypeCreatedByAsc  ChangelogChangeSortType = "CREATED_BY_ASC"
	ChangelogChangeSortTypeCreatedByDesc ChangelogChangeSortType = "CREATED_BY_DESC"
)

var AllChangelogChangeSortType = []ChangelogChangeSortType{
	ChangelogChangeSortTypeIDAsc,
	ChangelogChangeSortTypeIDDesc,
	ChangelogChangeSortTypeColumnAsc,
	ChangelogChangeSortTypeColumnDesc,
	ChangelogChangeSortTypeOldValueAsc,
	ChangelogChangeSortTypeOldValueDesc,
	ChangelogChangeSortTypeNewValueAsc,
	ChangelogChangeSortTypeNewValueDesc,
	ChangelogChangeSortTypeLogIDAsc,
	ChangelogChangeSortTypeLogIDDesc,
	ChangelogChangeSortTypeUpdatedAtAsc,
	ChangelogChangeSortTypeUpdatedAtDesc,
	ChangelogChangeSortTypeCreatedAtAsc,
	ChangelogChangeSortTypeCreatedAtDesc,
	ChangelogChangeSortTypeUpdatedByAsc,
	ChangelogChangeSortTypeUpdatedByDesc,
	ChangelogChangeSortTypeCreatedByAsc,
	ChangelogChangeSortTypeCreatedByDesc,
}

func (e ChangelogChangeSortType) IsValid() bool {
	switch e {
	case ChangelogChangeSortTypeIDAsc, ChangelogChangeSortTypeIDDesc, ChangelogChangeSortTypeColumnAsc, ChangelogChangeSortTypeColumnDesc, ChangelogChangeSortTypeOldValueAsc, ChangelogChangeSortTypeOldValueDesc, ChangelogChangeSortTypeNewValueAsc, ChangelogChangeSortTypeNewValueDesc, ChangelogChangeSortTypeLogIDAsc, ChangelogChangeSortTypeLogIDDesc, ChangelogChangeSortTypeUpdatedAtAsc, ChangelogChangeSortTypeUpdatedAtDesc, ChangelogChangeSortTypeCreatedAtAsc, ChangelogChangeSortTypeCreatedAtDesc, ChangelogChangeSortTypeUpdatedByAsc, ChangelogChangeSortTypeUpdatedByDesc, ChangelogChangeSortTypeCreatedByAsc, ChangelogChangeSortTypeCreatedByDesc:
		return true
	}
	return false
}

func (e ChangelogChangeSortType) String() string {
	return string(e)
}

func (e *ChangelogChangeSortType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ChangelogChangeSortType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ChangelogChangeSortType", str)
	}
	return nil
}

func (e ChangelogChangeSortType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ChangelogSortType string

const (
	ChangelogSortTypeIDAsc          ChangelogSortType = "ID_ASC"
	ChangelogSortTypeIDDesc         ChangelogSortType = "ID_DESC"
	ChangelogSortTypeEntityAsc      ChangelogSortType = "ENTITY_ASC"
	ChangelogSortTypeEntityDesc     ChangelogSortType = "ENTITY_DESC"
	ChangelogSortTypeEntityIDAsc    ChangelogSortType = "ENTITY_ID_ASC"
	ChangelogSortTypeEntityIDDesc   ChangelogSortType = "ENTITY_ID_DESC"
	ChangelogSortTypeTypeAsc        ChangelogSortType = "TYPE_ASC"
	ChangelogSortTypeTypeDesc       ChangelogSortType = "TYPE_DESC"
	ChangelogSortTypeDateAsc        ChangelogSortType = "DATE_ASC"
	ChangelogSortTypeDateDesc       ChangelogSortType = "DATE_DESC"
	ChangelogSortTypeUpdatedAtAsc   ChangelogSortType = "UPDATED_AT_ASC"
	ChangelogSortTypeUpdatedAtDesc  ChangelogSortType = "UPDATED_AT_DESC"
	ChangelogSortTypeCreatedAtAsc   ChangelogSortType = "CREATED_AT_ASC"
	ChangelogSortTypeCreatedAtDesc  ChangelogSortType = "CREATED_AT_DESC"
	ChangelogSortTypeUpdatedByAsc   ChangelogSortType = "UPDATED_BY_ASC"
	ChangelogSortTypeUpdatedByDesc  ChangelogSortType = "UPDATED_BY_DESC"
	ChangelogSortTypeCreatedByAsc   ChangelogSortType = "CREATED_BY_ASC"
	ChangelogSortTypeCreatedByDesc  ChangelogSortType = "CREATED_BY_DESC"
	ChangelogSortTypeChangesIDSAsc  ChangelogSortType = "CHANGES_IDS_ASC"
	ChangelogSortTypeChangesIDSDesc ChangelogSortType = "CHANGES_IDS_DESC"
)

var AllChangelogSortType = []ChangelogSortType{
	ChangelogSortTypeIDAsc,
	ChangelogSortTypeIDDesc,
	ChangelogSortTypeEntityAsc,
	ChangelogSortTypeEntityDesc,
	ChangelogSortTypeEntityIDAsc,
	ChangelogSortTypeEntityIDDesc,
	ChangelogSortTypeTypeAsc,
	ChangelogSortTypeTypeDesc,
	ChangelogSortTypeDateAsc,
	ChangelogSortTypeDateDesc,
	ChangelogSortTypeUpdatedAtAsc,
	ChangelogSortTypeUpdatedAtDesc,
	ChangelogSortTypeCreatedAtAsc,
	ChangelogSortTypeCreatedAtDesc,
	ChangelogSortTypeUpdatedByAsc,
	ChangelogSortTypeUpdatedByDesc,
	ChangelogSortTypeCreatedByAsc,
	ChangelogSortTypeCreatedByDesc,
	ChangelogSortTypeChangesIDSAsc,
	ChangelogSortTypeChangesIDSDesc,
}

func (e ChangelogSortType) IsValid() bool {
	switch e {
	case ChangelogSortTypeIDAsc, ChangelogSortTypeIDDesc, ChangelogSortTypeEntityAsc, ChangelogSortTypeEntityDesc, ChangelogSortTypeEntityIDAsc, ChangelogSortTypeEntityIDDesc, ChangelogSortTypeTypeAsc, ChangelogSortTypeTypeDesc, ChangelogSortTypeDateAsc, ChangelogSortTypeDateDesc, ChangelogSortTypeUpdatedAtAsc, ChangelogSortTypeUpdatedAtDesc, ChangelogSortTypeCreatedAtAsc, ChangelogSortTypeCreatedAtDesc, ChangelogSortTypeUpdatedByAsc, ChangelogSortTypeUpdatedByDesc, ChangelogSortTypeCreatedByAsc, ChangelogSortTypeCreatedByDesc, ChangelogSortTypeChangesIDSAsc, ChangelogSortTypeChangesIDSDesc:
		return true
	}
	return false
}

func (e ChangelogSortType) String() string {
	return string(e)
}

func (e *ChangelogSortType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ChangelogSortType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ChangelogSortType", str)
	}
	return nil
}

func (e ChangelogSortType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ChangelogType string

const (
	ChangelogTypeCreated ChangelogType = "CREATED"
	ChangelogTypeUpdated ChangelogType = "UPDATED"
	ChangelogTypeDeleted ChangelogType = "DELETED"
)

var AllChangelogType = []ChangelogType{
	ChangelogTypeCreated,
	ChangelogTypeUpdated,
	ChangelogTypeDeleted,
}

func (e ChangelogType) IsValid() bool {
	switch e {
	case ChangelogTypeCreated, ChangelogTypeUpdated, ChangelogTypeDeleted:
		return true
	}
	return false
}

func (e ChangelogType) String() string {
	return string(e)
}

func (e *ChangelogType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ChangelogType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ChangelogType", str)
	}
	return nil
}

func (e ChangelogType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
