// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gen

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type _Entity interface {
	Is_Entity()
}

type ChangelogChangeFilterType struct {
	And            []*ChangelogChangeFilterType `json:"AND"`
	Or             []*ChangelogChangeFilterType `json:"OR"`
	ID             *string                      `json:"id"`
	IDNe           *string                      `json:"id_ne"`
	IDGt           *string                      `json:"id_gt"`
	IDLt           *string                      `json:"id_lt"`
	IDGte          *string                      `json:"id_gte"`
	IDLte          *string                      `json:"id_lte"`
	IDIn           []string                     `json:"id_in"`
	IDNull         *bool                        `json:"id_null"`
	Column         *string                      `json:"column"`
	ColumnNe       *string                      `json:"column_ne"`
	ColumnGt       *string                      `json:"column_gt"`
	ColumnLt       *string                      `json:"column_lt"`
	ColumnGte      *string                      `json:"column_gte"`
	ColumnLte      *string                      `json:"column_lte"`
	ColumnIn       []string                     `json:"column_in"`
	ColumnLike     *string                      `json:"column_like"`
	ColumnPrefix   *string                      `json:"column_prefix"`
	ColumnSuffix   *string                      `json:"column_suffix"`
	ColumnNull     *bool                        `json:"column_null"`
	OldValue       *string                      `json:"oldValue"`
	OldValueNe     *string                      `json:"oldValue_ne"`
	OldValueGt     *string                      `json:"oldValue_gt"`
	OldValueLt     *string                      `json:"oldValue_lt"`
	OldValueGte    *string                      `json:"oldValue_gte"`
	OldValueLte    *string                      `json:"oldValue_lte"`
	OldValueIn     []string                     `json:"oldValue_in"`
	OldValueLike   *string                      `json:"oldValue_like"`
	OldValuePrefix *string                      `json:"oldValue_prefix"`
	OldValueSuffix *string                      `json:"oldValue_suffix"`
	OldValueNull   *bool                        `json:"oldValue_null"`
	NewValue       *string                      `json:"newValue"`
	NewValueNe     *string                      `json:"newValue_ne"`
	NewValueGt     *string                      `json:"newValue_gt"`
	NewValueLt     *string                      `json:"newValue_lt"`
	NewValueGte    *string                      `json:"newValue_gte"`
	NewValueLte    *string                      `json:"newValue_lte"`
	NewValueIn     []string                     `json:"newValue_in"`
	NewValueLike   *string                      `json:"newValue_like"`
	NewValuePrefix *string                      `json:"newValue_prefix"`
	NewValueSuffix *string                      `json:"newValue_suffix"`
	NewValueNull   *bool                        `json:"newValue_null"`
	LogID          *string                      `json:"logId"`
	LogIDNe        *string                      `json:"logId_ne"`
	LogIDGt        *string                      `json:"logId_gt"`
	LogIDLt        *string                      `json:"logId_lt"`
	LogIDGte       *string                      `json:"logId_gte"`
	LogIDLte       *string                      `json:"logId_lte"`
	LogIDIn        []string                     `json:"logId_in"`
	LogIDNull      *bool                        `json:"logId_null"`
	UpdatedAt      *time.Time                   `json:"updatedAt"`
	UpdatedAtNe    *time.Time                   `json:"updatedAt_ne"`
	UpdatedAtGt    *time.Time                   `json:"updatedAt_gt"`
	UpdatedAtLt    *time.Time                   `json:"updatedAt_lt"`
	UpdatedAtGte   *time.Time                   `json:"updatedAt_gte"`
	UpdatedAtLte   *time.Time                   `json:"updatedAt_lte"`
	UpdatedAtIn    []*time.Time                 `json:"updatedAt_in"`
	UpdatedAtNull  *bool                        `json:"updatedAt_null"`
	CreatedAt      *time.Time                   `json:"createdAt"`
	CreatedAtNe    *time.Time                   `json:"createdAt_ne"`
	CreatedAtGt    *time.Time                   `json:"createdAt_gt"`
	CreatedAtLt    *time.Time                   `json:"createdAt_lt"`
	CreatedAtGte   *time.Time                   `json:"createdAt_gte"`
	CreatedAtLte   *time.Time                   `json:"createdAt_lte"`
	CreatedAtIn    []*time.Time                 `json:"createdAt_in"`
	CreatedAtNull  *bool                        `json:"createdAt_null"`
	UpdatedBy      *string                      `json:"updatedBy"`
	UpdatedByNe    *string                      `json:"updatedBy_ne"`
	UpdatedByGt    *string                      `json:"updatedBy_gt"`
	UpdatedByLt    *string                      `json:"updatedBy_lt"`
	UpdatedByGte   *string                      `json:"updatedBy_gte"`
	UpdatedByLte   *string                      `json:"updatedBy_lte"`
	UpdatedByIn    []string                     `json:"updatedBy_in"`
	UpdatedByNull  *bool                        `json:"updatedBy_null"`
	CreatedBy      *string                      `json:"createdBy"`
	CreatedByNe    *string                      `json:"createdBy_ne"`
	CreatedByGt    *string                      `json:"createdBy_gt"`
	CreatedByLt    *string                      `json:"createdBy_lt"`
	CreatedByGte   *string                      `json:"createdBy_gte"`
	CreatedByLte   *string                      `json:"createdBy_lte"`
	CreatedByIn    []string                     `json:"createdBy_in"`
	CreatedByNull  *bool                        `json:"createdBy_null"`
	Log            *ChangelogFilterType         `json:"log"`
}

type ChangelogChangeSortType struct {
	ID        *ObjectSortType    `json:"id"`
	Column    *ObjectSortType    `json:"column"`
	OldValue  *ObjectSortType    `json:"oldValue"`
	NewValue  *ObjectSortType    `json:"newValue"`
	LogID     *ObjectSortType    `json:"logId"`
	UpdatedAt *ObjectSortType    `json:"updatedAt"`
	CreatedAt *ObjectSortType    `json:"createdAt"`
	UpdatedBy *ObjectSortType    `json:"updatedBy"`
	CreatedBy *ObjectSortType    `json:"createdBy"`
	Log       *ChangelogSortType `json:"log"`
}

type ChangelogFilterType struct {
	And               []*ChangelogFilterType     `json:"AND"`
	Or                []*ChangelogFilterType     `json:"OR"`
	ID                *string                    `json:"id"`
	IDNe              *string                    `json:"id_ne"`
	IDGt              *string                    `json:"id_gt"`
	IDLt              *string                    `json:"id_lt"`
	IDGte             *string                    `json:"id_gte"`
	IDLte             *string                    `json:"id_lte"`
	IDIn              []string                   `json:"id_in"`
	IDNull            *bool                      `json:"id_null"`
	Entity            *string                    `json:"entity"`
	EntityNe          *string                    `json:"entity_ne"`
	EntityGt          *string                    `json:"entity_gt"`
	EntityLt          *string                    `json:"entity_lt"`
	EntityGte         *string                    `json:"entity_gte"`
	EntityLte         *string                    `json:"entity_lte"`
	EntityIn          []string                   `json:"entity_in"`
	EntityLike        *string                    `json:"entity_like"`
	EntityPrefix      *string                    `json:"entity_prefix"`
	EntitySuffix      *string                    `json:"entity_suffix"`
	EntityNull        *bool                      `json:"entity_null"`
	EntityID          *string                    `json:"entityID"`
	EntityIDNe        *string                    `json:"entityID_ne"`
	EntityIDGt        *string                    `json:"entityID_gt"`
	EntityIDLt        *string                    `json:"entityID_lt"`
	EntityIDGte       *string                    `json:"entityID_gte"`
	EntityIDLte       *string                    `json:"entityID_lte"`
	EntityIDIn        []string                   `json:"entityID_in"`
	EntityIDLike      *string                    `json:"entityID_like"`
	EntityIDPrefix    *string                    `json:"entityID_prefix"`
	EntityIDSuffix    *string                    `json:"entityID_suffix"`
	EntityIDNull      *bool                      `json:"entityID_null"`
	PrincipalID       *string                    `json:"principalID"`
	PrincipalIDNe     *string                    `json:"principalID_ne"`
	PrincipalIDGt     *string                    `json:"principalID_gt"`
	PrincipalIDLt     *string                    `json:"principalID_lt"`
	PrincipalIDGte    *string                    `json:"principalID_gte"`
	PrincipalIDLte    *string                    `json:"principalID_lte"`
	PrincipalIDIn     []string                   `json:"principalID_in"`
	PrincipalIDLike   *string                    `json:"principalID_like"`
	PrincipalIDPrefix *string                    `json:"principalID_prefix"`
	PrincipalIDSuffix *string                    `json:"principalID_suffix"`
	PrincipalIDNull   *bool                      `json:"principalID_null"`
	Type              *ChangelogType             `json:"type"`
	TypeNe            *ChangelogType             `json:"type_ne"`
	TypeGt            *ChangelogType             `json:"type_gt"`
	TypeLt            *ChangelogType             `json:"type_lt"`
	TypeGte           *ChangelogType             `json:"type_gte"`
	TypeLte           *ChangelogType             `json:"type_lte"`
	TypeIn            []ChangelogType            `json:"type_in"`
	TypeNull          *bool                      `json:"type_null"`
	Date              *time.Time                 `json:"date"`
	DateNe            *time.Time                 `json:"date_ne"`
	DateGt            *time.Time                 `json:"date_gt"`
	DateLt            *time.Time                 `json:"date_lt"`
	DateGte           *time.Time                 `json:"date_gte"`
	DateLte           *time.Time                 `json:"date_lte"`
	DateIn            []*time.Time               `json:"date_in"`
	DateNull          *bool                      `json:"date_null"`
	UpdatedAt         *time.Time                 `json:"updatedAt"`
	UpdatedAtNe       *time.Time                 `json:"updatedAt_ne"`
	UpdatedAtGt       *time.Time                 `json:"updatedAt_gt"`
	UpdatedAtLt       *time.Time                 `json:"updatedAt_lt"`
	UpdatedAtGte      *time.Time                 `json:"updatedAt_gte"`
	UpdatedAtLte      *time.Time                 `json:"updatedAt_lte"`
	UpdatedAtIn       []*time.Time               `json:"updatedAt_in"`
	UpdatedAtNull     *bool                      `json:"updatedAt_null"`
	CreatedAt         *time.Time                 `json:"createdAt"`
	CreatedAtNe       *time.Time                 `json:"createdAt_ne"`
	CreatedAtGt       *time.Time                 `json:"createdAt_gt"`
	CreatedAtLt       *time.Time                 `json:"createdAt_lt"`
	CreatedAtGte      *time.Time                 `json:"createdAt_gte"`
	CreatedAtLte      *time.Time                 `json:"createdAt_lte"`
	CreatedAtIn       []*time.Time               `json:"createdAt_in"`
	CreatedAtNull     *bool                      `json:"createdAt_null"`
	UpdatedBy         *string                    `json:"updatedBy"`
	UpdatedByNe       *string                    `json:"updatedBy_ne"`
	UpdatedByGt       *string                    `json:"updatedBy_gt"`
	UpdatedByLt       *string                    `json:"updatedBy_lt"`
	UpdatedByGte      *string                    `json:"updatedBy_gte"`
	UpdatedByLte      *string                    `json:"updatedBy_lte"`
	UpdatedByIn       []string                   `json:"updatedBy_in"`
	UpdatedByNull     *bool                      `json:"updatedBy_null"`
	CreatedBy         *string                    `json:"createdBy"`
	CreatedByNe       *string                    `json:"createdBy_ne"`
	CreatedByGt       *string                    `json:"createdBy_gt"`
	CreatedByLt       *string                    `json:"createdBy_lt"`
	CreatedByGte      *string                    `json:"createdBy_gte"`
	CreatedByLte      *string                    `json:"createdBy_lte"`
	CreatedByIn       []string                   `json:"createdBy_in"`
	CreatedByNull     *bool                      `json:"createdBy_null"`
	Changes           *ChangelogChangeFilterType `json:"changes"`
}

type ChangelogSortType struct {
	ID          *ObjectSortType          `json:"id"`
	Entity      *ObjectSortType          `json:"entity"`
	EntityID    *ObjectSortType          `json:"entityID"`
	PrincipalID *ObjectSortType          `json:"principalID"`
	Type        *ObjectSortType          `json:"type"`
	Date        *ObjectSortType          `json:"date"`
	UpdatedAt   *ObjectSortType          `json:"updatedAt"`
	CreatedAt   *ObjectSortType          `json:"createdAt"`
	UpdatedBy   *ObjectSortType          `json:"updatedBy"`
	CreatedBy   *ObjectSortType          `json:"createdBy"`
	ChangesIds  *ObjectSortType          `json:"changesIds"`
	Changes     *ChangelogChangeSortType `json:"changes"`
}

type _Service struct {
	Sdl *string `json:"sdl"`
}

type ChangelogType string

const (
	ChangelogTypeCreated ChangelogType = "CREATED"
	ChangelogTypeUpdated ChangelogType = "UPDATED"
	ChangelogTypeDeleted ChangelogType = "DELETED"
)

var AllChangelogType = []ChangelogType{
	ChangelogTypeCreated,
	ChangelogTypeUpdated,
	ChangelogTypeDeleted,
}

func (e ChangelogType) IsValid() bool {
	switch e {
	case ChangelogTypeCreated, ChangelogTypeUpdated, ChangelogTypeDeleted:
		return true
	}
	return false
}

func (e ChangelogType) String() string {
	return string(e)
}

func (e *ChangelogType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ChangelogType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ChangelogType", str)
	}
	return nil
}

func (e ChangelogType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ObjectSortType string

const (
	ObjectSortTypeAsc  ObjectSortType = "ASC"
	ObjectSortTypeDesc ObjectSortType = "DESC"
)

var AllObjectSortType = []ObjectSortType{
	ObjectSortTypeAsc,
	ObjectSortTypeDesc,
}

func (e ObjectSortType) IsValid() bool {
	switch e {
	case ObjectSortTypeAsc, ObjectSortTypeDesc:
		return true
	}
	return false
}

func (e ObjectSortType) String() string {
	return string(e)
}

func (e *ObjectSortType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ObjectSortType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ObjectSortType", str)
	}
	return nil
}

func (e ObjectSortType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
